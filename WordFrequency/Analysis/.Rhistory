l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
theta <- 3
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 1
B <- 0
C <- 1
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=log(p)), data = df) +
geom_line(lwd = .2) +
geom_hline(yintercept = mu, color = 'red', linetype = 'dashed') +
theme(text = element_text(size=20)) +
#scale_y_continuous(label=scientific_format(digits=1))+
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = 180, y = Inf,
hjust = 1, vjust = 1,
size = 5,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f",A,B,C))
ggsave(filename = "./Simulation_C.pdf",height = 3, width = 4)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
stan = read.csv(file='model-out20k.txt')
glimpse(stan)
stan = read.csv(file='model-out20k.csv')
glimpse(stan)
#to calculate correlations
cor.test(stan$mu, stan$C, method="kendall")
#to calculate correlations
cor.test(stan$mu, stan$A, method="kendall")
length(stan$B>1)
length(stan$B>10000)
sum(stan$B>10000)
sum(stan$B>1)
sum(stan$B>1)/sum(stan$B)
sum(stan$B<1)/sum(stan$B)
#B values greater than 1
sum(stan$B<1)/sum(stan$B)
#B values greater than 1
sum(stan$B<1)
#B values greater than 1
sum(stan$B<1)/sum(stan$B)
#B values greater than 1
sum(stan$B<1)/sum(stan$B<1000000)
#B values greater than 1
sum(stan$B<1)/sum(stan$B<Inf)
#B values greater than 1
sum(stan$B<1)/length(stan$B)
