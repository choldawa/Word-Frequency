abline(h=exp(mu), lty=2)
theta <- 3.0
theta <- 3.0
ndays <- 876
theta <- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.01
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
<- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
<- 3.0
mu <- -13.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l")
abline(h=exp(mu), lty=2)
library(ggplot2)
ggplot(x = t, y = p)+
geom_line()
plot(p, type="l")
abline(h=exp(mu), lty=2, colors(red))
abline(h=exp(mu), lty=2, color = red)
abline(h=exp(mu), lty=2, col = 'red')
plot(p, type="l", xlab = 'Day')
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
ndays <- 876
theta <- 3.0
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
ndays <- 876
theta <- 3.0
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
mark(labels = "Some messy plot", x = 700, y = 0.00007)
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
library('unikn')
import.packages('unikn')
install.packages('unikn')
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
library('unikn')
ndays <- 876
theta <- 3.0
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0.0
B <- 0.0
C <- 0.0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
mark(labels = "Some messy plot", x = 700, y = 0.00007)
mark(labels = "Some messy plot", x = 700, y = 0.00007, cex = 1)
p <- exp(mu+A*t+s*l)
plot(p, type="l", xlab = 'Day', ylab = 'Log Probability')
abline(h=exp(mu), lty=2, col = 'red')
mark(labels = "Some messy plot", x = 700, y = 0.00007, cex = 1)
mark(labels = "Z = 0 \n B=0", x = 700, y = 0.00007, cex = 1)
mark(labels = "A = 0 \n B=0", x = 700, y = 0.00007, cex = 1, col_bg = 'white')
help(mark)
library(tidyr)
library(ggplot2)
d <- read.csv("model-out.csv")
s <- strsplit(as.character(d$word), "\\/")
d$word <- unlist(lapply(s, function(a){a[1]}))
d$tag  <- unlist(lapply(s, function(a){a[2]}))
# collapse some tagging
d$mytag <- d$tag
d$mytag[d$tag=="nnp"] <- "nn"
d$mytag[d$tag=="nnps"] <- "nn"
d$mytag[d$tag=="nns"] <- "nn"
d$mytag[d$tag=="vbd"] <- "vb"
d$mytag[d$tag=="vbg"] <- "vb"
d$mytag[d$tag=="vbn"] <- "vb"
d$mytag[d$tag=="vbp"] <- "vb"
d$mytag[d$tag=="vbz"] <- "vb"
d$mytag[d$tag=="rbr"] <- "rb"
d$mytag[d$tag=="jjr"] <- "jj"
d$mytag[d$tag=="jjs"] <- "jj"
# and add function words
d$mytag[d$tag=="cd"] <- "func"
d$mytag[d$tag=="in"] <- "func"
d$mytag[d$tag=="rp"] <- "func"
d$mytag[d$tag=="prp"] <- "func"
d$mytag[d$tag=="md"] <- "func"
d$mytag[d$tag=="cc"] <- "func"
d$mytag[d$tag=="dt"] <- "func"
d$mytag[d$tag=="pdt"] <- "func"
# toss tags that have few words
t <- table(d$mytag)
d <- subset(d, (mytag != "fw") & (mytag == "func" | is.element(mytag, names(t[t>10]))))
d$mytag <- as.factor(d$mytag)
# convert to long format so we can make one plot
dlong <- gather(d, variable, value, scale:jump, factor_key=TRUE)
# Scatter plot version:
# plt <- ggplot(dlong, aes(x=mu,y=value)) +
#     facet_grid(variable ~ mytag, scales="free") +
#     geom_point(alpha=0.01) +
#     geom_hline(aes(yintercept=0), color="red", alpha=1*(dlong$variable!="scale" & dlong$variable!="theta" & dlong$variable!="jump")) +
#     theme_bw()
plt <- ggplot(dlong, aes(x=mu,y=value)) +
facet_grid(variable ~ mytag, scales="free") +
geom_hex(bins=15) +
geom_hline(aes(yintercept=0), color="red", alpha=1*(dlong$variable!="scale" & dlong$variable!="theta" & dlong$variable!="jump")) +
theme_bw()+
annotate("label", hjust = 1, vjust = 1, label = "avg rate")
#+ theme(text = element_text(size=36), aspect.ratio=2/3)
plt
setwd("~/Documents/Projects/Word-Frequency/WordFrequency/Analysis")
library(tidyr)
library(ggplot2)
d <- read.csv("model-out.csv")
s <- strsplit(as.character(d$word), "\\/")
d$word <- unlist(lapply(s, function(a){a[1]}))
d$tag  <- unlist(lapply(s, function(a){a[2]}))
# collapse some tagging
d$mytag <- d$tag
d$mytag[d$tag=="nnp"] <- "nn"
d$mytag[d$tag=="nnps"] <- "nn"
d$mytag[d$tag=="nns"] <- "nn"
d$mytag[d$tag=="vbd"] <- "vb"
d$mytag[d$tag=="vbg"] <- "vb"
d$mytag[d$tag=="vbn"] <- "vb"
d$mytag[d$tag=="vbp"] <- "vb"
d$mytag[d$tag=="vbz"] <- "vb"
d$mytag[d$tag=="rbr"] <- "rb"
d$mytag[d$tag=="jjr"] <- "jj"
d$mytag[d$tag=="jjs"] <- "jj"
# and add function words
d$mytag[d$tag=="cd"] <- "func"
d$mytag[d$tag=="in"] <- "func"
d$mytag[d$tag=="rp"] <- "func"
d$mytag[d$tag=="prp"] <- "func"
d$mytag[d$tag=="md"] <- "func"
d$mytag[d$tag=="cc"] <- "func"
d$mytag[d$tag=="dt"] <- "func"
d$mytag[d$tag=="pdt"] <- "func"
# toss tags that have few words
t <- table(d$mytag)
d <- subset(d, (mytag != "fw") & (mytag == "func" | is.element(mytag, names(t[t>10]))))
d$mytag <- as.factor(d$mytag)
# convert to long format so we can make one plot
dlong <- gather(d, variable, value, scale:jump, factor_key=TRUE)
# Scatter plot version:
# plt <- ggplot(dlong, aes(x=mu,y=value)) +
#     facet_grid(variable ~ mytag, scales="free") +
#     geom_point(alpha=0.01) +
#     geom_hline(aes(yintercept=0), color="red", alpha=1*(dlong$variable!="scale" & dlong$variable!="theta" & dlong$variable!="jump")) +
#     theme_bw()
plt <- ggplot(dlong, aes(x=mu,y=value)) +
facet_grid(variable ~ mytag, scales="free") +
geom_hex(bins=15) +
geom_hline(aes(yintercept=0), color="red", alpha=1*(dlong$variable!="scale" & dlong$variable!="theta" & dlong$variable!="jump")) +
theme_bw()+
annotate("label", hjust = 1, vjust = 1, label = "avg rate")
#+ theme(text = element_text(size=36), aspect.ratio=2/3)
plt
plt <- ggplot(dlong, aes(x=mu,y=value)) +
facet_grid(variable ~ mytag, scales="free") +
geom_hex(bins=15) +
geom_hline(aes(yintercept=0), color="red", alpha=1*(dlong$variable!="scale" & dlong$variable!="theta" & dlong$variable!="jump")) +
theme_bw()+
annotate("label", x = -Inf, y = -Inf, label = "avg rate")
#+ theme(text = element_text(size=36), aspect.ratio=2/3)
plt
# random noise (sigma.jump > 0, rest are 0)
# 0<B<1
# B>1
# C > 0
# C < 0
library(ggplot2)
theme_set(theme_classic())
ndays <- 876
theta <- 3.0
mu <- -10.0
sigma.jump <- .50
sigma.drift <- .1
s <- 1.0
A <- 0
B <- .9
C <- 0
inv_logit <- function(x) { 1/(1+exp(-x)) }
l <- rep(0,ndays) # Not sure what to start on
for(t in 3:ndays) {
if(runif(1) < inv_logit(theta)) {
l[t] <- rnorm(1, mean=B*l[t-1] + C*(l[t-1]-l[t-2]), sd=sigma.drift)
}
else {
l[t] <- rnorm(1, mean=0, sd=sigma.jump)
}
}
# convert into probabilities
t <- (1:ndays)/ndays # day scaled to be 0->1
p <- exp(mu+A*t+s*l)
df = data.frame(t,p)
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf, label = "avg rate")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf, hjust = 1, label = "avg rate")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf, hjust = 1, vjust = 1, label = "avg rate")
sprintf("%f %d", c(pi,3))
sprintf("%f %d", c(pi,A))
sprintf("%f %d", pi,A)
sprintf("%f \n%d", pi,A)
sprintf("%f \r\n%d", pi,A)
sprintf("%f \r\n %d", pi,A)
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = "A = \n B= \n C= ")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = sprintf("A = \nB= \nC= ", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = sprintf("A = \nB= \nC= ", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = sprintf("A = \nB= \nC= ", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = "A = \nB= \nC= ")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = "A =\nB=\nC= ")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = "A=\nB=\nC= ")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = "A=\nB=\n C= ")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = "A=\nB=\n    C= ")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = "A=\nB=\nC=")
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = sprintf("A=%d\nB=%d\nC=%d", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = sprintf("A=%f\nB=%f\nC=%f", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = sprintf("A=%.1f\nB=%f\nC=%f", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
size = 20,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
size = 10,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f", A,B,C))
ggplot(aes(x=t*876,y=p), data = df) +
geom_line() +
geom_hline(yintercept = exp(mu), color = 'red', linetype = 'dashed') +
theme(text = element_text(size=36), aspect.ratio=2/3) +
ylab("Log Probability")+
xlab("Day")+
annotate("label", x = Inf, y = Inf,
hjust = 1, vjust = 1,
size = 8,
label = sprintf("A=%.1f\nB=%.1f\nC=%.1f", A,B,C))
